- name: Ensure remote config dir exists
  file:
    name: /etc/kubeadm
    state: directory

- name: Ensure certs dir exits
  file:
    name: /etc/kubernetes/pki/etcd
    state: directory

- name: Generate kubeadm config
  template:
    src: kubeadm.yaml.j2
    dest: /etc/kubeadm/kubeadm.yaml
  when: not kube_ha

- name: Generate kubeadm config
  template:
    src: kubeadm-ha.yaml.j2
    dest: /etc/kubeadm/kubeadm.yaml
  when: kube_ha

- name: Generate ca
  shell: kubeadm init phase certs all --config /etc/kubeadm/kubeadm.yaml
  run_once: true
  delegate_to: "{{ ansible_play_hosts|first }}"


- name: Fetch ca from hosts
  fetch:
    src: "{{ item }}"
    dest: "/tmp"
  with_items:
  - "/etc/kubernetes/pki/ca.crt"
  - "/etc/kubernetes/pki/ca.key"
  - "/etc/kubernetes/pki/sa.key"
  - "/etc/kubernetes/pki/sa.pub"
  - "/etc/kubernetes/pki/front-proxy-ca.crt"
  - "/etc/kubernetes/pki/front-proxy-ca.key"
  - "/etc/kubernetes/pki/etcd/ca.crt"
  - "/etc/kubernetes/pki/etcd/ca.key"
  delegate_to: "{{ ansible_play_hosts|first }}"
  run_once: true

- name: Copy ca to hosts
  copy:
    src: "/tmp/{{ ansible_play_hosts|first }}/{{ item }}"
    dest: "{{ item }}"
  with_items:
  - "/etc/kubernetes/pki/ca.crt"
  - "/etc/kubernetes/pki/ca.key"
  - "/etc/kubernetes/pki/sa.key"
  - "/etc/kubernetes/pki/sa.pub"
  - "/etc/kubernetes/pki/front-proxy-ca.crt"
  - "/etc/kubernetes/pki/front-proxy-ca.key"
  - "/etc/kubernetes/pki/etcd/ca.crt"
  - "/etc/kubernetes/pki/etcd/ca.key"
  when: inventory_hostname != ansible_play_hosts|first

